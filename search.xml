<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog 启动！</title>
    <url>/2023/10/16/0000/</url>
    <content><![CDATA[<p>🔸记录一个开始，这里什么也没有，往上翻翻吧！😉😉😉</p>
]]></content>
  </entry>
  <entry>
    <title>Telegraf + InfluxDB2 + Grafana 搭建可监控环境</title>
    <url>/2023/11/17/0002/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>笔者将搭建一个 Telegraf + Influxdb + Grafana 可监控环境，通过这套工具组合，可以构建实时监控系统，实时分析和展示各种指标和数据，帮助用户更好地理解和管理系统的运行状态。</p>
<p><strong>Telegraf</strong> 收集数据：开源的服务器代理程序，用于收集、处理和发送指标数据。<br><strong>Influxdb</strong> 存储数据：开源的时序数据库，专门用于存储和查询时间相关的数据，旨在为监控、分析和可视化应用程序提供高性能的数据存储解决方案。<br><strong>Grafana</strong> 展示数据：开源的数据可视化和监控平台，用于实时监控、分析和可视化各种指标数据。它提供了丰富的图表、仪表盘和警报功能，使用户能够直观地理解和分析数据。</p>
<div align=center>
  <img src=/images/public/APM-Diagram-2.png />
</div>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p><strong>工作环境</strong></p>
<p><em><strong>硬件:</strong></em> 树莓派4B 8G&#x2F;64bit<br><em><strong>系统:</strong></em> Ubuntu 22.04.3 LTS (GNU&#x2F;Linux 5.15.0-1042-raspi aarch64)<br><em><strong>Docker:</strong></em> Standalone 20.10.24</p>
<p><strong>搭建环境</strong></p>
<p><em><strong>Telegraf:</strong></em> 1.21.4+ds1-0ubuntu2<br><em><strong>Influxdb:</strong></em> 2.7.4<br><em><strong>Grafana:</strong></em> 10.2.1-ubuntu</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>在Docker中安装Influxdb</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull influxdb</span><br><span class="line"><span class="attribute">docker</span> run -d --name influxdb -p <span class="number">8086</span>:<span class="number">8086</span> influxdb</span><br></pre></td></tr></table></figure>

<p><strong>Influxdb预备工作</strong><br>打开<a href="http://127.0.0.1:8086/">http://127.0.0.1:8086</a> 并点击InfluxDB系统自带的仪表盘</p>
<div align=center>
  <img src=/images/2023/11/17/203950.png />
</div>
点击看到系统的运行信息说明InfluxDB正在运行
<div align=center>
  <img src=/images/2023/11/17/204100.png />
</div>
进入管理面板并添加一个Token，也可使用初始化配置的Token。
<div align=center>
  <img src=/images/2023/11/17/202719.png />
</div>

<p><strong>在Docker中安装Grafana</strong></p>
<p>这里使用Grafana官方命令:</p>
<div align=center>
  <img src=/images/2023/11/17/200401.png />
</div>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d --name=grafana -p <span class="number">3000</span>:<span class="number">3000</span> grafana/grafana-enterprise:<span class="number">10</span>.<span class="number">2</span>.<span class="number">1</span>-ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>为Grafana配置并进行初步测试</strong><br>打开<a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a> 进入Grafana面板并选择 连接-&gt;数据源-&gt;添加数据源-&gt;Influxdb 配置一个数据源</p>
<div align=center>
  <img src=/images/2023/11/17/201957.png />
</div>
配置信息及细节见下图
<div align=center>
  <img src=/images/2023/11/17/204922.png />
</div>
<div align=center>
  <img src=/images/2023/11/17/205752.png />
</div>
然后导入Grafana控制台模板，这里输入代码：13315进行导入，在Grafana官网还有其他模板，感兴趣的读者可以自行了解
<div align=center>
  <img src=/images/2023/11/17/212454.png />
</div>
注意这里可能会出现问题，笔者在第一次配置的时候发现Grafana无法正常显示数据。
<div align=center>
  <img src=/images/2023/11/17/213004.png />
</div>
笔者推测是模板中的Flux语句与安装的Influxdb版本有略微的差别，于是笔者重写了模板中的Flux语句，最后我们可以看到Influxdb Bucket中的数据成功在Grafana中显示出来。
<div align=center>
  <img src=/images/2023/11/17/211018.png />
</div>
笔者将修改后的模板的json文件放在这里提供读者下载，读者将json导入Grafana模板即可。

<ul>
<li><a href="/downloads/influxdb-2.0-oss-metrics.json">⬇️⬇️⬇️点击下载json文件</a></li>
</ul>
<p><strong>在树莓派主机中安装Telegraf</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> update &amp;&amp; sudo apt-<span class="built_in">get</span> install telegraf</span><br></pre></td></tr></table></figure>

<p>Telegraf，启动！</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="literal">start</span> telegraf</span><br></pre></td></tr></table></figure>

<p>如果你希望树莓派每次开机Telegraf都能启动就执行该语句</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> telegraf</span><br></pre></td></tr></table></figure>
<p><strong>最后一步</strong><br>首先是Influxdb，创建一个新的Bucket在LoadData中选择Telegraf，默认的inputs选择System即可</p>
<div align=center>
  <img src=/images/2023/11/17/221438.png />
</div>
将下列config复制到上图的标注处，这些会决定Telegraf会采集哪些类型的数据输入到Influxdb中

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="string">[[inputs.cpu]]</span></span><br><span class="line">percpu = <span class="literal">true</span></span><br><span class="line">totalcpu = <span class="literal">true</span></span><br><span class="line">collect_cpu_time = <span class="literal">false</span></span><br><span class="line">report_active = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[inputs.disk]]</span></span><br><span class="line">ignore_fs = [<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;devtmpfs&quot;</span>, <span class="string">&quot;devfs&quot;</span>, <span class="string">&quot;iso9660&quot;</span>, <span class="string">&quot;overlay&quot;</span>, <span class="string">&quot;aufs&quot;</span>, <span class="string">&quot;squashfs&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">[[inputs.diskio]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[inputs.kernel]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[inputs.mem]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[inputs.processes]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[inputs.swap]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[inputs.system]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在前面以及完成了Telegraf然后这里Influxdb告诉我们只需完成2.和3.即可将Telegraf link起来</p>
<div align=center>
  <img src=/images/2023/11/17/222122.png />
</div>
接下来在树莓派终端追加Telegraf 配置，编辑telegraf.conf

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/etc/</span>telegraf/telegraf.conf</span><br></pre></td></tr></table></figure>

<p>追加以下内容并保存</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[[outputs.influxdb_v2]]</span></span><br><span class="line"><span class="attr">urls</span> = [<span class="string">&quot;http://127.0.0.1:8086&quot;</span>]</span><br><span class="line"><span class="attr">token</span> = <span class="string">&quot;$INFLUX_TOKEN&quot;</span></span><br><span class="line"><span class="attr">organization</span> = <span class="string">&quot;你的Organization&quot;</span></span><br><span class="line"><span class="attr">bucket</span> = <span class="string">&quot;你的Bucket&quot;</span></span><br></pre></td></tr></table></figure>

<p>接着完成Influxdb刚刚提示你的第二步，在树莓派中输入指令(<INFLUX_TOKEN> 见influxdb提示)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">INFLUX_TOKEN</span>=&lt;INFLUX_TOKEN&gt;</span><br></pre></td></tr></table></figure>

<p>接着完成Influxdb刚刚提示你的第三步，在树莓派中输入指令(<URI> 见influxdb提示，追加–debug会将调试日志输出到控制台)</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">telegraf --config `&lt;URI&gt;` --debug</span><br></pre></td></tr></table></figure>

<p>随后在控制台观察有以下日志输出说明配置成功了</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">I</span>! <span class="symbol">Starting</span> <span class="symbol">Telegraf</span> <span class="number">1.21</span><span class="number">.4</span>+ds1<span class="number">-0</span>ubuntu2</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">I</span>! <span class="symbol">Loaded</span> inputs: cpu disk diskio kernel mem processes swap system</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">I</span>! <span class="symbol">Loaded</span> aggregators:</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">I</span>! <span class="symbol">Loaded</span> processors:</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">I</span>! <span class="symbol">Loaded</span> outputs: influxdb_v2</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">I</span>! <span class="symbol">Tags</span> enabled: host=raspberry</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">I</span>! [agent] <span class="symbol">Config</span>: <span class="symbol">Interval</span>:<span class="number">10</span>s, <span class="symbol">Quiet</span>:false, <span class="symbol">Hostname</span>:<span class="string">&quot;raspberry&quot;</span>, <span class="symbol">Flush</span> <span class="symbol">Interval</span>:<span class="number">10</span>s</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">D</span>! [agent] <span class="symbol">Initializing</span> plugins</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">D</span>! [agent] <span class="symbol">Connecting</span> outputs</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">D</span>! [agent] <span class="symbol">Attempting</span> connection to [outputs.influxdb_v2]</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">D</span>! [agent] <span class="symbol">Successfully</span> connected to outputs.influxdb_v2</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">32</span><span class="symbol">Z</span> <span class="symbol">D</span>! [agent] <span class="symbol">Starting</span> service inputs</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">40</span><span class="symbol">Z</span> <span class="symbol">D</span>! [inputs.disk] [<span class="symbol">SystemPS</span>] partition <span class="number">0</span>: &#123;<span class="string">&quot;device&quot;</span>:<span class="string">&quot;sysfs&quot;</span>,<span class="string">&quot;mountpoint&quot;</span>:<span class="string">&quot;/sys&quot;</span>,<span class="string">&quot;fstype&quot;</span>:<span class="string">&quot;sysfs&quot;</span>,<span class="string">&quot;opts&quot;</span>:[<span class="string">&quot;rw&quot;</span>,<span class="string">&quot;nosuid&quot;</span>,<span class="string">&quot;nodev&quot;</span>,<span class="string">&quot;noexec&quot;</span>,<span class="string">&quot;relatime&quot;</span>]&#125;</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">40</span><span class="symbol">Z</span> <span class="symbol">D</span>! [inputs.disk] [<span class="symbol">SystemPS</span>] -&gt; using mountpoint <span class="string">&quot;/sys&quot;</span>...</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">40</span><span class="symbol">Z</span> <span class="symbol">D</span>! [inputs.disk] [<span class="symbol">SystemPS</span>] =&gt; kept...</span><br><span class="line"><span class="number">2023</span><span class="number">-11</span><span class="number">-17</span><span class="symbol">T15</span>:<span class="number">00</span>:<span class="number">40</span><span class="symbol">Z</span> <span class="symbol">D</span>! [inputs.disk] [<span class="symbol">SystemPS</span>] partition <span class="number">1</span>: &#123;<span class="string">&quot;device&quot;</span>:<span class="string">&quot;proc&quot;</span>,<span class="string">&quot;mountpoint&quot;</span>:<span class="string">&quot;/proc&quot;</span>,<span class="string">&quot;fstype&quot;</span>:<span class="string">&quot;proc&quot;</span>,<span class="string">&quot;opts&quot;</span>:[<span class="string">&quot;rw&quot;</span>,<span class="string">&quot;nosuid&quot;</span>,<span class="string">&quot;nodev&quot;</span>,<span class="string">&quot;noexec&quot;</span>,<span class="string">&quot;relatime&quot;</span>]&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>接着我们在Grafana添加一个以Telegraf Bucket的新数据源，然后在Grafana中导入代码为14126的Telegraf模板，读者可温习前面的配置步骤。最后面板数据成功展示在Grafana中，大功告成，收工！</p>
<div align=center>
  <img src=/images/2023/11/17/231039.png />
</div>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>读者可在自己开发的应用中使用InfluxDB Client&#x2F;API将数据存储到Influxdb中进行系统监控与数据分析。以Java为例，比较典型的是利用Micrometer + InfluxDB + Grafana将服务器、JVM和Application度量指标进行监控分析。</p>
<p>整个配置过程笔者的步骤稍多，需细心，相信读者也能通过这篇文章少踩一些坑少走些弯路。</p>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>应用监控</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>Ubuntu</tag>
        <tag>Docker</tag>
        <tag>Telegraf</tag>
        <tag>Influxdb</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>礼物</title>
    <url>/2023/10/17/0001/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5066b5301f4eefcf157c6d9f88d17f8d276426ff3f51863c072730cf7ea29c20">3e83d50de96ca2207a1aba1932db313a1b91373322dd25f3c27f364062631a34c8f40da60edcd32558c4f32607e8be22a081300a2d482a4da94066949fe4b6216c536697f20520762c35504531b69c84e884bd08493b15cee4c14a15ca63e2bf1648be51fa7e78ebdbdd591147d61399525b90900414ea06cf454dfd501d0f8a18b0e74a31850e31238d67ba29642a733154ef5e240872a66dd3c62c636e47c0d0eb4d9de7c734c17e39734dd4437eccf4fe674a664239ed6dc2dd61700760cd06941e239c43183123e087431f7d0abd697e900fe24485dd98a954ed4add69381cda0c786971e48e11615e8cff3c7aa1c8329769ac6df1597f3e2b4f76a2e680e8c29fa6183bcf6a8ea25006af0c9446df4d78698fa2909fd8db51ab7f428bf6314b0c415ae62db222a2edff49f4d28930e5120a1af2d4c7bd7135503cda50361e1c053fde83f081d63c2ac06cdc374fcf9dcac6ddd8727d3865e121d1f754e9f5a5afa4a47b1c9fecec799b79262a54a42d35f56ccc3baad5a9768a29df2f2886943410bca23547a31d443038f124948b490d7ef8084c492c6b4c01b51220af3d0febae0d404efe9f84b24d5690a19e7c377f217b80d29f6a1908badb1572ecdf7114399a25de79e907d434cf9b8a8a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入访问码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>友人帐</category>
      </categories>
  </entry>
  <entry>
    <title>CyberFlux 开发随笔</title>
    <url>/2023/11/20/0005/</url>
    <content><![CDATA[<p>今天修改了CyberFlux Gateway登陆页面样式，在设计上模仿了Grafana的登陆页面。<br><strong>先来展示</strong></p>
<p>Grafana登陆界面</p>
<div align=center>
  <img src=/images/2023/11/20/225444.png />
</div>

<p>CyberFlux Gatweay Login设计展示，配色以蓝绿色为主渐变，黑色背景卡片也凸显的恰到好处。</p>
<div align=center>
  <img src=/images/2023/11/20/225601.png />
</div>

<p>开发过程发现Grafana小太阳Logo居然是渐变色的，看着挺有感觉，笔者使用的Logo资源是SVG格式的。这里给出将SVG改为渐变色的技巧。</p>
<ol>
<li>创建渐变定义：首先，你需要在SVG的<code>&lt;defs&gt;</code>元素中创建一个渐变定义。<code>&lt;defs&gt;</code>元素用于定义可重用的元素，比如渐变、滤镜等。示例代码如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;myGradient&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;0%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们创建了一个线性渐变（<code>&lt;linearGradient&gt;</code>）并给它一个唯一的ID（<code>myGradient</code>）。<code>x1</code>、<code>y1</code>、<code>x2</code>、<code>y2</code>属性定义了渐变的方向，这里我们使用水平方向的渐变。</p>
<ol start="2">
<li>应用渐变：接下来，你需要将渐变应用到具体的元素上。你可以使用<code>fill</code>属性或<code>stroke</code>属性来应用渐变。示例代码如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;myGradient&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;0%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#myGradient)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们创建了一个矩形（<code>&lt;rect&gt;</code>）元素，并使用<code>fill</code>属性将渐变应用到矩形的填充上。<code>url(#myGradient)</code>表示引用了之前定义的渐变。</p>
<ol start="3">
<li>调整渐变方向和颜色：你可以通过调整渐变定义中的属性来改变渐变的方向和颜色。例如，你可以修改<code>x1</code>、<code>y1</code>、<code>x2</code>、<code>y2</code>属性来改变线性渐变的方向，修改<code>offset</code>和<code>stop-color</code>属性来改变渐变的颜色。示例代码如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;myGradient&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;yellow&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;green&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#myGradient)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们修改了渐变的方向为从左上角到右下角，并添加了一个黄色的中间颜色。</p>
<p>这就是在SVG中设置渐变色的详细步骤。</p>
]]></content>
      <categories>
        <category>CyberFlux</category>
        <category>开发日志</category>
      </categories>
      <tags>
        <tag>CyberFlux</tag>
      </tags>
  </entry>
  <entry>
    <title>Infludb Flux指南</title>
    <url>/2023/11/18/0003/</url>
    <content><![CDATA[<h1 id="开始使用Flux"><a href="#开始使用Flux" class="headerlink" title="开始使用Flux"></a>开始使用Flux</h1><h2 id="查询InfluxDB"><a href="#查询InfluxDB" class="headerlink" title="查询InfluxDB"></a>查询InfluxDB</h2><p>本指南将介绍使用 Flux 从 InfluxDB 查询数据的基础知识。 每个 Flux 查询都需要以下内容：</p>
<ol>
<li>数据源</li>
<li>时间范围</li>
<li>数据筛选器</li>
</ol>
<h3 id="定义数据源"><a href="#定义数据源" class="headerlink" title="定义数据源"></a>定义数据源</h3><p>Flux的<a href="https://docs.influxdata.com/flux/v0/stdlib/influxdata/influxdb/from/"><code>from()</code></a>函数定义一个 InfluxDB 数据源。 它需要一个<a href="https://docs.influxdata.com/flux/v0/stdlib/influxdata/influxdb/from/#bucket"><code>bucket</code></a>参数。 以下示例用作存储桶名称。example-bucket</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>:<span class="string">&quot;example-bucket&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="指定时间范围"><a href="#指定时间范围" class="headerlink" title="指定时间范围"></a>指定时间范围</h3><p>Flux 在查询时序数据时需要时间范围。“无界”查询非常耗费资源，作为一种保护措施， 如果没有指定范围，Flux 不会查询数据库。</p>
<p>使用管道向前运算符(|&gt;)将数据从数据源管道传输到<a href="https://docs.influxdata.com/flux/v0/stdlib/universe/range"><code>range()</code></a>中，后者指定查询的时间范围。它接受两个参数：启动和停止。开始值和停止值可以是使用负持续时间的相对值，也可以是使用时间戳的绝对值。</p>
<p><strong>示例相对时间范围</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Relative time range with start only. Stop defaults to now.</span></span><br><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>:<span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Relative time range with start and stop</span></span><br><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>:<span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h, <span class="attr">stop</span>: -10m)</span><br></pre></td></tr></table></figure>

<p>相对范围是相对于“现在”的。</p>
<p><strong>绝对时间范围示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>:<span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: <span class="number">2021</span>-<span class="number">01</span>-01<span class="attr">T00</span>:<span class="number">00</span>:00Z, <span class="attr">stop</span>: <span class="number">2021</span>-<span class="number">01</span>-01<span class="attr">T12</span>:<span class="number">00</span>:00Z)</span><br></pre></td></tr></table></figure>

<p><strong>使用以下命令：</strong></p>
<p>在本指南中，请使用相对时间范围 ，将查询结果限制为过去 15 分钟的数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>:<span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -15m)</span><br></pre></td></tr></table></figure>

<h3 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h3><p>将范围内的数据传递到filter()中，以根据数据属性或列缩小结果。filter()有一个参数fn，它要求谓词函数按列值计算行。<br>filter()对每个输入行进行迭代，并将行数据构造为Flux记录。记录作为r传递到谓词函数中，在那里使用谓词表达式对其求值。</p>
<p>计算结果为false的行将从输出数据中删除。计算结果为true的行将保留在输出数据中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pattern</span></span><br><span class="line">(r) =&gt; (r.<span class="property">recordProperty</span> comparisonOperator comparisonExpression)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example with single filter</span></span><br><span class="line">(r) =&gt; (r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example with multiple filters</span></span><br><span class="line">(r) =&gt; (r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> != <span class="string">&quot;usage_system&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>使用以下命令：</strong></p>
<p>对于本例，根据cpu测量值、usage_system字段和cpu总标记值进行筛选：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -15m)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="生成查询的数据"><a href="#生成查询的数据" class="headerlink" title="生成查询的数据"></a>生成查询的数据</h3><p><a href="https://docs.influxdata.com/flux/v0/stdlib/universe/yield/"><code>yield()</code></a>输出查询结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -15m)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">yield</span>()</span><br></pre></td></tr></table></figure>

<p>Flux在每个脚本的末尾自动采用yield()函数来输出和可视化数据。只有在同一Flux查询中包含多个查询时，才需要显式调用yield()。每一组返回的数据都需要使用yield()函数进行命名。</p>
<h2 id="使用-Flux-转换数据"><a href="#使用-Flux-转换数据" class="headerlink" title="使用 Flux 转换数据"></a>使用 Flux 转换数据</h2><p>从 InfluxDB 查询数据时，通常需要以某种方式转换这些数据。 常见的示例包括聚合数据、缩减采样数据等。</p>
<p>本指南演示如何使用Flux函数转换数据。它遍历创建一个Flux脚本，该脚本将数据划分为时间窗口，对每个窗口中的_values进行平均，并将平均值输出为一个新表。</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>使用前面的从 InfluxDB 查询数据指南中构建的查询，但更新范围以提取最后一小时的数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="通量函数"><a href="#通量函数" class="headerlink" title="通量函数"></a>通量函数</h3><p>Flux提供了许多执行特定操作、转换和任务的函数。您还可以在Flux查询中创建自定义函数。Flux标准库文档中详细介绍了函数。<br>转换从InfluxDB查询的数据时使用的一种常见类型的函数是聚合函数。聚合函数获取表中的一组_values，聚合它们，并将它们转换为新值。</p>
<p>本例使用<a href="https://docs.influxdata.com/flux/v0/stdlib/universe/mean"><code>mean()</code></a>函数对每个时间窗口内的值进行平均。</p>
<p>下面的示例介绍了窗口化和聚合数据所需的步骤，但有一个<a href="https://docs.influxdata.com/influxdb/v2/query-data/get-started/transform-data/#helper-functions"><code>aggregateWindow()</code></a>辅助函数可以帮您完成这项工作。了解这个过程中的步骤是很好的。</p>
<h3 id="查看数据窗口"><a href="#查看数据窗口" class="headerlink" title="查看数据窗口"></a>查看数据窗口</h3><p>Flux的<a href="https://docs.influxdata.com/flux/v0/stdlib/universe/window"><code>window()</code></a>函数根据时间值对记录进行分区。使用every参数可以定义每个窗口的持续时间。</p>
<p><strong>日历月和年</strong></p>
<p>日历月份和年份<br>every支持所有有效的持续时间单位，包括日历月(1mo)和年(1y)。</p>
<p>对于本例，窗口数据的间隔为5分钟(5m)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">window</span>(<span class="attr">every</span>: 5m)</span><br></pre></td></tr></table></figure>

<p>当数据被收集到时间窗口中时，每个窗口都作为自己的表输出。当可视化时，每个表都被分配了一种唯一的颜色。</p>
<p><img src="https://docs.influxdata.com/img/flux/windowed-data.png" alt="窗口化数据表"></p>
<h3 id="聚合窗口化数据"><a href="#聚合窗口化数据" class="headerlink" title="聚合窗口化数据"></a>聚合窗口化数据</h3><p>Flux聚合函数获取每个表中的s，并以某种方式聚合它们。 使用 _value <a href="https://docs.influxdata.com/flux/v0/stdlib/universe/mean"><code>mean()</code></a>函数对每个表的s求平均值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">window</span>(<span class="attr">every</span>: 5m)</span><br><span class="line">    |&gt; <span class="title function_">mean</span>()</span><br></pre></td></tr></table></figure>

<p>当每个窗口中的行被聚合时，它们的输出表只包含一个具有聚合值的行。窗口化的表仍然是独立的，当可视化时，它们将显示为单个的、不相连的点。</p>
<p><img src="https://docs.influxdata.com/img/flux/windowed-aggregates.png" alt="窗口化聚合数据"></p>
<h3 id="向聚合添加时间"><a href="#向聚合添加时间" class="headerlink" title="向聚合添加时间"></a>向聚合添加时间</h3><p>在聚合值时，生成的表没有_time列，因为用于聚合的记录都具有不同的时间戳。聚合函数不会推断聚合值应该使用的时间。因此，_time列被删除。</p>
<p>在下一个操作中需要_time列。 要添加一个，请使用<a href="https://docs.influxdata.com/flux/v0/stdlib/universe/duplicate"><code>duplicate()</code></a>函数将_stop列复制为每个窗口表的_time列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">window</span>(<span class="attr">every</span>: 5m)</span><br><span class="line">    |&gt; <span class="title function_">mean</span>()</span><br><span class="line">    |&gt; <span class="title function_">duplicate</span>(<span class="attr">column</span>: <span class="string">&quot;_stop&quot;</span>, <span class="attr">as</span>: <span class="string">&quot;_time&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="取消窗口聚合表"><a href="#取消窗口聚合表" class="headerlink" title="取消窗口聚合表"></a>取消窗口聚合表</h3><p>将window()函数与every:inf参数一起使用，可以将所有点聚集到一个单一的无限窗口中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">window</span>(<span class="attr">every</span>: 5m)</span><br><span class="line">    |&gt; <span class="title function_">mean</span>()</span><br><span class="line">    |&gt; <span class="title function_">duplicate</span>(<span class="attr">column</span>: <span class="string">&quot;_stop&quot;</span>, <span class="attr">as</span>: <span class="string">&quot;_time&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">window</span>(<span class="attr">every</span>: inf)</span><br></pre></td></tr></table></figure>

<p>一旦取消分组并组合到一个表中，聚合数据点将在可视化中显示为连接的。</p>
<p><img src="https://docs.influxdata.com/img/flux/windowed-aggregates-ungrouped.png" alt="未窗口聚合数据"></p>
<h3 id="帮助程序函数"><a href="#帮助程序函数" class="headerlink" title="帮助程序函数"></a><strong>帮助程序函数</strong></h3><p>这似乎只是为了构建一个聚合数据的查询而进行的大量编码，然而，通过这个过程有助于了解数据在通过每个函数时是如何改变“形状”的。</p>
<p>Flux提供(并允许您创建)”helper”函数，这些函数抽象了其中的许多步骤。本指南中执行的相同操作可以使用<a href="https://docs.influxdata.com/flux/v0/stdlib/universe/aggregatewindow"><code>aggregateWindow()</code></a>完成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>(<span class="attr">bucket</span>: <span class="string">&quot;example-bucket&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">range</span>(<span class="attr">start</span>: -1h)</span><br><span class="line">    |&gt; <span class="title function_">filter</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">_measurement</span> == <span class="string">&quot;cpu&quot;</span> and r.<span class="property">_field</span> == <span class="string">&quot;usage_system&quot;</span> and r.<span class="property">cpu</span> == <span class="string">&quot;cpu-total&quot;</span>)</span><br><span class="line">    |&gt; <span class="title function_">aggregateWindow</span>(<span class="attr">every</span>: 5m, <span class="attr">fn</span>: mean)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>指南</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>CyberFlux 开发随笔</title>
    <url>/2023/11/21/0006/</url>
    <content><![CDATA[<hr>
<p>今天笔者准备使用Vue <code>v-for</code> 批量渲染一批 <code>&lt;img :src=&quot;item.logo&quot;/&gt;</code> 标签的时候发现图片无法加载。记录一下vue动态渲染img的解决方案问题 <code>(item.logo = &quot;@/assets/image/logo/xxx.svg&quot;)</code></p>
<p><strong>问题排查</strong></p>
<p>若使用 <code>&lt;img src=&quot;@/assets/image/logo/xxx.svg&quot;/&gt;</code> 标签是可用正常显示的</p>
<p>笔者当时并没有思考出原因何在，于是查阅资料给出的解决方案是:</p>
<p>使用 <code>require</code>包裹变量进行动态渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;require(item.logo)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>随后发生新的报错: <code>ReferenceError: require is not defined</code><br>初步判断这是因为 require 是属于 Webpack 的方法，而笔者使用的是Vite。</p>
<p>笔者此时突然想到import x from ‘….’ 也可用导出图片变量, 于是尝试:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;img :src=<span class="string">&quot;require(item.logo)&quot;</span>/&gt;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;@/assets/image/logo/xxx.svg&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(logo)</span><br><span class="line"><span class="comment">//log: /src/assets/image/logo/xxx.svg</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>发现logo的值为string类型,仅仅是将<code>@</code> 替换为 <code>/src</code><br>于是更改列表中的路径前缀发现成功渲染!<br><strong>如图所示:</strong></p>
<div align=center>
  <img src=/images/2023/11/21/190247.png />
</div>

]]></content>
      <categories>
        <category>CyberFlux</category>
        <category>开发日志</category>
      </categories>
      <tags>
        <tag>CyberFlux</tag>
        <tag>Vue</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件合集</title>
    <url>/2023/11/19/0004/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>中间件</category>
        <category>数据库</category>
      </categories>
  </entry>
</search>
